presets:

- labels:
    preset-deployer-github-token: "true"
  env:
  - name: GITHUB_USER
    value: jetstack-bot
  - name: GITHUB_TOKEN_FILE
    value: /etc/github/token
  volumeMounts:
  - name: github-token
    mountPath: /etc/github
  volumes:
  - name: github-token
    secret:
      secretName: bot-github-token

- labels:
    preset-deployer-ssh-key: "true"
  volumeMounts:
  - name: ssh
    mountPath: /root/.ssh
  volumes:
  - name: ssh
    secret:
      secretName: jetstack-bot-ssh-keys
      defaultMode: 0400

- labels:
    preset-deployer-service-account: "true"
  env:
  - name: GOOGLE_APPLICATION_CREDENTIALS
    value: /creds/service-account.json
  volumeMounts:
    - name: creds
      mountPath: /creds
  volumes:
  - name: creds
    secret:
      secretName: deployer-service-account

- labels:
    preset-image-deploy: "true"
  volumeMounts:
  - mountPath: /lib/modules
    name: modules
    readOnly: true
  - mountPath: /sys/fs/cgroup
    name: cgroup
  volumes:
  - name: modules
    hostPath:
      path: /lib/modules
      type: Directory
  - name: cgroup
    hostPath:
      path: /sys/fs/cgroup
      type: Directory

postsubmits:
  jetstack/testing:

  - name: post-testing-upload-testgrid-config
    cluster: trusted
    run_if_changed: '^(config/jobs/.*\.yaml)|(config/testgrid/dashboards\.yaml)$'
    decorate: true
    branches:
    - master
    labels:
      preset-deployer-github-token: "true"
      preset-bazel-scratch-dir: "true"
    annotations:
      testgrid-dashboards: jetstack-testing-janitors
      testgrid-alert-email: cert-manager-dev-alerts@googlegroups.com
    spec:
      containers:
      - image: gcr.io/k8s-prow/transfigure
        command:
        - /transfigure.sh
        args:
        - /etc/github/token
        - ./config/config.yaml # path to prow config.yaml
        - ./config/jobs/ # path to prow job definitions
        - ./config/testgrid/dashboards.yaml # path to testgrid config
        - jetstack # name of the directory containing our testgrid configs
        - test-infra # name of jetstack-bot's fork of test-infra
        - jetstack-bot # username of the git user (used in commits)
        - tech+github-bot@jetstack.io # email of the git user (used in commits)

  - name: post-testing-push-bazelbuild
    cluster: trusted
    run_if_changed: '^images/bazelbuild/'
    branches:
    - master
    decorate: true
    labels:
      preset-dind-enabled: "true"
      preset-bazel-scratch-dir: "true"
      preset-image-deploy: "true"
      preset-deployer-service-account: "true"
      preset-deployer-github-token: "true"
      preset-deployer-ssh-key: "true"
    annotations:
      testgrid-create-test-group: 'true'
      testgrid-dashboards: jetstack-testing-janitors
      testgrid-alert-email: cert-manager-dev-alerts@googlegroups.com
      description: Build and push the 'bazelbuild' image
    spec:
      containers:
      - image: eu.gcr.io/jetstack-build-infra-images/bazelbuild:20210323-056d642-2.2.0
        args:
        # Wrap the release script with the runner so we can use docker-in-docker
        - runner
        - images/builder/ci-runner.sh
        - images/bazelbuild
        - --confirm=true
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]

  - name: post-testing-push-golang-dind
    cluster: trusted
    run_if_changed: '^images/golang-dind/'
    branches:
    - master
    decorate: true
    labels:
      preset-dind-enabled: "true"
      preset-bazel-scratch-dir: "true"
      preset-image-deploy: "true"
      preset-deployer-service-account: "true"
      preset-deployer-github-token: "true"
      preset-deployer-ssh-key: "true"
    annotations:
      testgrid-create-test-group: 'true'
      testgrid-dashboards: jetstack-testing-janitors
      testgrid-alert-email: cert-manager-dev-alerts@googlegroups.com
      description: Build and push the 'golang-dind' image
    spec:
      containers:
      - image: eu.gcr.io/jetstack-build-infra-images/bazelbuild:20210323-056d642-2.2.0
        args:
        # Wrap the release script with the runner so we can use docker-in-docker
        - runner
        - images/builder/ci-runner.sh
        - images/golang-dind
        - --confirm=true
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]

  - name: post-testing-push-golang-nodejs
    cluster: trusted
    run_if_changed: '^images/golang-nodejs/'
    branches:
    - master
    decorate: true
    labels:
      preset-dind-enabled: "true"
      preset-bazel-scratch-dir: "true"
      preset-image-deploy: "true"
      preset-deployer-service-account: "true"
      preset-deployer-github-token: "true"
      preset-deployer-ssh-key: "true"
    annotations:
      testgrid-create-test-group: 'true'
      testgrid-dashboards: jetstack-testing-janitors
      testgrid-alert-email: cert-manager-dev-alerts@googlegroups.com
      description: Build and push the 'golang-nodejs' image
    spec:
      containers:
      - image: eu.gcr.io/jetstack-build-infra-images/bazelbuild:20210323-056d642-2.2.0
        args:
        # Wrap the release script with the runner so we can use docker-in-docker
        - runner
        - images/builder/ci-runner.sh
        - images/golang-nodejs
        - --confirm=true
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]

  - name: post-testing-push-katacoda-lint
    cluster: trusted
    run_if_changed: '^images/katacoda-lint/'
    branches:
    - master
    decorate: true
    labels:
      preset-dind-enabled: "true"
      preset-bazel-scratch-dir: "true"
      preset-image-deploy: "true"
      preset-deployer-service-account: "true"
      preset-deployer-github-token: "true"
      preset-deployer-ssh-key: "true"
    annotations:
      testgrid-create-test-group: 'true'
      testgrid-dashboards: jetstack-testing-janitors
      testgrid-alert-email: cert-manager-dev-alerts@googlegroups.com
      description: Build and push the 'katacoda-lint' image
    spec:
      containers:
      - image: eu.gcr.io/jetstack-build-infra-images/bazelbuild:20210323-056d642-2.2.0
        args:
        # Wrap the release script with the runner so we can use docker-in-docker
        - runner
        - images/builder/ci-runner.sh
        - images/katacoda-lint
        - --confirm=true
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]

  - name: post-testing-push-tarmak-ruby
    cluster: trusted
    run_if_changed: '^images/tarmak/ruby/'
    branches:
    - master
    decorate: true
    labels:
      preset-dind-enabled: "true"
      preset-bazel-scratch-dir: "true"
      preset-image-deploy: "true"
      preset-deployer-service-account: "true"
      preset-deployer-github-token: "true"
      preset-deployer-ssh-key: "true"
    annotations:
      testgrid-create-test-group: 'true'
      testgrid-dashboards: jetstack-testing-janitors
      testgrid-alert-email: cert-manager-dev-alerts@googlegroups.com
      description: Build and push the 'tarmak-ruby' image
    spec:
      containers:
      - image: eu.gcr.io/jetstack-build-infra-images/bazelbuild:20210323-056d642-2.2.0
        args:
        # Wrap the release script with the runner so we can use docker-in-docker
        - runner
        - images/builder/ci-runner.sh
        - images/tarmak/ruby
        - --confirm=true
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]

  - name: post-testing-push-tarmak-sphinx-docs
    cluster: trusted
    run_if_changed: '^images/tarmak/sphinx-docs/'
    branches:
    - master
    decorate: true
    labels:
      preset-dind-enabled: "true"
      preset-bazel-scratch-dir: "true"
      preset-image-deploy: "true"
      preset-deployer-service-account: "true"
      preset-deployer-github-token: "true"
      preset-deployer-ssh-key: "true"
    annotations:
      testgrid-create-test-group: 'true'
      testgrid-dashboards: jetstack-testing-janitors
      testgrid-alert-email: cert-manager-dev-alerts@googlegroups.com
      description: Build and push the 'tarmak-sphinx-docs' image
    spec:
      containers:
      - image: eu.gcr.io/jetstack-build-infra-images/bazelbuild:20210323-056d642-2.2.0
        args:
        # Wrap the release script with the runner so we can use docker-in-docker
        - runner
        - images/builder/ci-runner.sh
        - images/tarmak/sphinx-docs
        - --confirm=true
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]

  - name: post-testing-push-terraform-google-gke-cluster
    cluster: trusted
    run_if_changed: '^images/terraform-google-gke-cluster/'
    branches:
    - master
    decorate: true
    labels:
      preset-dind-enabled: "true"
      preset-bazel-scratch-dir: "true"
      preset-image-deploy: "true"
      preset-deployer-service-account: "true"
      preset-deployer-github-token: "true"
      preset-deployer-ssh-key: "true"
    annotations:
      testgrid-create-test-group: 'true'
      testgrid-dashboards: jetstack-testing-janitors
      testgrid-alert-email: cert-manager-dev-alerts@googlegroups.com
      description: Build and push the 'terraform-google-gke-cluster' image
    spec:
      containers:
      - image: eu.gcr.io/jetstack-build-infra-images/bazelbuild:20210323-056d642-2.2.0
        args:
        # Wrap the release script with the runner so we can use docker-in-docker
        - runner
        - images/builder/ci-runner.sh
        - images/terraform-google-gke-cluster
        - --confirm=true
        resources:
          requests:
            cpu: 500m
            memory: 512Mi
        securityContext:
          privileged: true
          capabilities:
            add: ["SYS_ADMIN"]
